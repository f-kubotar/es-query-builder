var search_data = {"index":{"searchIndex":["esquerybuilder","parser","token","tokenizer","build()","build_filter_hash()","build_queries()","build_query_hash()","connect_queries()","create_bool_filters()","create_bool_queries()","create_query()","create_token()","minus?()","new()","new()","new()","new()","parse()","parser()","split_by_or_token()","tokenize()","tokenizer()"],"longSearchIndex":["esquerybuilder","esquerybuilder::parser","esquerybuilder::token","esquerybuilder::tokenizer","esquerybuilder#build()","esquerybuilder::parser#build_filter_hash()","esquerybuilder::parser#build_queries()","esquerybuilder::parser#build_query_hash()","esquerybuilder::parser#connect_queries()","esquerybuilder::parser#create_bool_filters()","esquerybuilder::parser#create_bool_queries()","esquerybuilder::parser#create_query()","esquerybuilder::tokenizer#create_token()","esquerybuilder::token#minus?()","esquerybuilder::new()","esquerybuilder::parser::new()","esquerybuilder::token::new()","esquerybuilder::tokenizer::new()","esquerybuilder::parser#parse()","esquerybuilder#parser()","esquerybuilder::parser#split_by_or_token()","esquerybuilder::tokenizer#tokenize()","esquerybuilder#tokenizer()"],"info":[["EsQueryBuilder","","EsQueryBuilder.html","","<p>The class has a responsibility for converting a query string into a\ncorresponding query hash object for …\n"],["EsQueryBuilder::Parser","","EsQueryBuilder/Parser.html","","<p>The class which has a responsibility for creatign a query.\n<p>Note that the term “query” has two …\n"],["EsQueryBuilder::Token","","EsQueryBuilder/Token.html","",""],["EsQueryBuilder::Tokenizer","","EsQueryBuilder/Tokenizer.html","",""],["build","EsQueryBuilder","EsQueryBuilder.html#method-i-build","(query_string)","<p>Convert the given query string into a query object.\n<p>query_string &mdash; A query String for searching.\n\n<p>Examples …\n"],["build_filter_hash","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-build_filter_hash","(filter_tokens)","<p>Build a filter parameter hash by query tokens\n<p>filter_tokens &mdash; An Array of filter Tokens.\n\n<p>Returns\n"],["build_queries","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-build_queries","(tokens)","<p>Convert the given tokens into sequence of queries.\n<p>tokens &mdash; An Array of Tokens.\n\n<p>Returns\n"],["build_query_hash","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-build_query_hash","(query_tokens)","<p>Build a query hash by query tokens\n<p>query_tokens &mdash; An Array of query Tokens.\n\n<p>Returns\n"],["connect_queries","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-connect_queries","(queries)","<p>Merge sequence of queries into a single query.\n<p>queries &mdash; An Array of Hashes. Eash hash represents a query. …\n\n"],["create_bool_filters","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-create_bool_filters","(filter_tokens)","<p>Create boolean filter based on the filter matches. If a field query in\nhierarchy fields ends with &#39;/&#39;, …\n"],["create_bool_queries","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-create_bool_queries","(query_tokens)","<p>Create boolean query based with the given query tokens.\n<p>query_tokens &mdash; An Array of query Tokens.\n\n<p>Returns …\n"],["create_query","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-create_query","(query_hash, filter_hash)","<p>Connect given query hash and filter hash objects.\n<p>query_hash &mdash; A Hash represents a query hash.\n<p>filter_hash … &mdash; "],["create_token","EsQueryBuilder::Tokenizer","EsQueryBuilder/Tokenizer.html#method-i-create_token","(full, minus, field, quoted, simple)",""],["minus?","EsQueryBuilder::Token","EsQueryBuilder/Token.html#method-i-minus-3F","()",""],["new","EsQueryBuilder","EsQueryBuilder.html#method-c-new","(query_fields: [], filter_fields: [], all_query_fields: '_all', hierarchy_fields: [])","<p>Construct the query builder object.\n<p>query_fields &mdash; An Array of Strings for specifing allowed quering types …\n"],["new","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-c-new","(all_query_fields = '_all', hierarchy_fields = [])","<p>Construct the parser object.\n<p>query_fields &mdash; An Array of Strings for specifing allowed quering types (default: …\n"],["new","EsQueryBuilder::Token","EsQueryBuilder/Token.html#method-c-new","(full: nil, minus: nil, field: nil, term: nil, type: nil)",""],["new","EsQueryBuilder::Tokenizer","EsQueryBuilder/Tokenizer.html#method-c-new","(query_fields = [], filter_fields = [])","<p>Construct the tokenizer object.\n<p>filter_fields &mdash; An Array of Strings for specifing allowed filtering types …\n"],["parse","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-parse","(tokens)","<p>Parse the given tokens and build a query hash.\n<p>tokens &mdash; An Array of Tokens.\n\n<p>Returns\n"],["parser","EsQueryBuilder","EsQueryBuilder.html#method-i-parser","()","<p>Parser for the builder.\n<p>Returns\n<p>Returns a Parser.\n"],["split_by_or_token","EsQueryBuilder::Parser","EsQueryBuilder/Parser.html#method-i-split_by_or_token","(tokens)","<p>Divide the given tokens array into sub arrays by &#39;or&#39; token.\n<p>tokens &mdash; An Array of Search::QueryBuilder::Token …\n\n"],["tokenize","EsQueryBuilder::Tokenizer","EsQueryBuilder/Tokenizer.html#method-i-tokenize","(query_string)","<p>Tokenize the given query string for parsing it later.\n<p>query_string &mdash; The utf8 encoded String.\n\n<p>Examples\n"],["tokenizer","EsQueryBuilder","EsQueryBuilder.html#method-i-tokenizer","()","<p>Tokenizer for the builder.\n<p>Returns\n<p>Returns a Tokenizer.\n"]]}}